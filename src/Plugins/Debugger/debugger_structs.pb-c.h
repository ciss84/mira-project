/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: external/debugger_structs.proto */

#ifndef PROTOBUF_C_external_2fdebugger_5fstructs_2eproto__INCLUDED
#define PROTOBUF_C_external_2fdebugger_5fstructs_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _DbgGpRegisters DbgGpRegisters;
typedef struct _DbgFpRegisters DbgFpRegisters;
typedef struct _DbgDbRegisters DbgDbRegisters;
typedef struct _DbgThreadLimited DbgThreadLimited;
typedef struct _DbgThreadFull DbgThreadFull;
typedef struct _DbgCred DbgCred;
typedef struct _DbgFileDesc DbgFileDesc;
typedef struct _DbgProcessFull DbgProcessFull;
typedef struct _DbgVmEntry DbgVmEntry;
typedef struct _DbgProcessLimited DbgProcessLimited;


/* --- enums --- */


/* --- messages --- */

struct  _DbgGpRegisters
{
  ProtobufCMessage base;
  protobuf_c_boolean has_r_r15;
  uint64_t r_r15;
  protobuf_c_boolean has_r_r14;
  uint64_t r_r14;
  protobuf_c_boolean has_r_r13;
  uint64_t r_r13;
  protobuf_c_boolean has_r_r12;
  uint64_t r_r12;
  protobuf_c_boolean has_r_r11;
  uint64_t r_r11;
  protobuf_c_boolean has_r_r10;
  uint64_t r_r10;
  protobuf_c_boolean has_r_r9;
  uint64_t r_r9;
  protobuf_c_boolean has_r_r8;
  uint64_t r_r8;
  protobuf_c_boolean has_r_rdi;
  uint64_t r_rdi;
  protobuf_c_boolean has_r_rsi;
  uint64_t r_rsi;
  protobuf_c_boolean has_r_rbp;
  uint64_t r_rbp;
  protobuf_c_boolean has_r_rbx;
  uint64_t r_rbx;
  protobuf_c_boolean has_r_rdx;
  uint64_t r_rdx;
  protobuf_c_boolean has_r_rcx;
  uint64_t r_rcx;
  protobuf_c_boolean has_r_rax;
  uint64_t r_rax;
  protobuf_c_boolean has_r_trapno;
  uint32_t r_trapno;
  /*
   * uint16
   */
  protobuf_c_boolean has_r_fs;
  uint32_t r_fs;
  /*
   * uint16
   */
  protobuf_c_boolean has_r_gs;
  uint32_t r_gs;
  protobuf_c_boolean has_r_err;
  uint32_t r_err;
  /*
   * uint16
   */
  protobuf_c_boolean has_r_es;
  uint32_t r_es;
  /*
   * uint16
   */
  protobuf_c_boolean has_r_ds;
  uint32_t r_ds;
  protobuf_c_boolean has_r_rip;
  uint64_t r_rip;
  protobuf_c_boolean has_r_cs;
  uint64_t r_cs;
  protobuf_c_boolean has_r_rflags;
  uint64_t r_rflags;
  protobuf_c_boolean has_r_rsp;
  uint64_t r_rsp;
  protobuf_c_boolean has_r_ss;
  uint64_t r_ss;
};
#define DBG_GP_REGISTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_gp_registers__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _DbgFpRegisters
{
  ProtobufCMessage base;
  /*
   * I really don't feel like dealing with this
   */
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define DBG_FP_REGISTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_fp_registers__descriptor) \
    , 0,{0,NULL} }


struct  _DbgDbRegisters
{
  ProtobufCMessage base;
  /*
   * len 16
   */
  size_t n_debugregs;
  uint32_t *debugregs;
};
#define DBG_DB_REGISTERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_db_registers__descriptor) \
    , 0,NULL }


struct  _DbgThreadLimited
{
  ProtobufCMessage base;
  protobuf_c_boolean has_proc;
  uint64_t proc;
  protobuf_c_boolean has_threadid;
  int32_t threadid;
  char *name;
  /*
   * len 2
   */
  protobuf_c_boolean has_retval;
  int64_t retval;
  protobuf_c_boolean has_kernelstack;
  uint64_t kernelstack;
  protobuf_c_boolean has_kernelstackpages;
  int32_t kernelstackpages;
  protobuf_c_boolean has_err_no;
  int32_t err_no;
};
#define DBG_THREAD_LIMITED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_thread_limited__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _DbgThreadFull
{
  ProtobufCMessage base;
  protobuf_c_boolean has_proc;
  uint64_t proc;
  protobuf_c_boolean has_threadid;
  int32_t threadid;
  char *name;
  /*
   * len 2
   */
  protobuf_c_boolean has_retval;
  int64_t retval;
  protobuf_c_boolean has_kernelstack;
  uint64_t kernelstack;
  protobuf_c_boolean has_kernelstackpages;
  int32_t kernelstackpages;
  protobuf_c_boolean has_err_no;
  int32_t err_no;
  DbgGpRegisters *gpregisters;
  DbgFpRegisters *fpregisters;
  DbgDbRegisters *dbregisters;
};
#define DBG_THREAD_FULL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_thread_full__descriptor) \
    , 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL }


struct  _DbgCred
{
  ProtobufCMessage base;
  protobuf_c_boolean has_effectiveuserid;
  uint32_t effectiveuserid;
  protobuf_c_boolean has_realuserid;
  uint32_t realuserid;
  protobuf_c_boolean has_saveduserid;
  uint32_t saveduserid;
  protobuf_c_boolean has_numgroups;
  int32_t numgroups;
  protobuf_c_boolean has_realgroupid;
  uint32_t realgroupid;
  protobuf_c_boolean has_savedgroupid;
  uint32_t savedgroupid;
  protobuf_c_boolean has_prison;
  uint64_t prison;
  protobuf_c_boolean has_sceauthid;
  uint64_t sceauthid;
  /*
   * len 4
   */
  size_t n_scecaps;
  uint64_t *scecaps;
  /*
   * len 4
   */
  size_t n_sceattr;
  uint64_t *sceattr;
};
#define DBG_CRED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_cred__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


struct  _DbgFileDesc
{
  ProtobufCMessage base;
};
#define DBG_FILE_DESC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_file_desc__descriptor) \
     }


struct  _DbgProcessFull
{
  ProtobufCMessage base;
  size_t n_threads;
  DbgThreadLimited **threads;
  protobuf_c_boolean has_unused;
  uint32_t unused;
  protobuf_c_boolean has_processid;
  int32_t processid;
  protobuf_c_boolean has_parentproc;
  uint64_t parentproc;
  protobuf_c_boolean has_oppid;
  int32_t oppid;
  protobuf_c_boolean has_dbgchild;
  int32_t dbgchild;
  protobuf_c_boolean has_vmspace;
  uint64_t vmspace;
  protobuf_c_boolean has_exitthreads;
  int32_t exitthreads;
  protobuf_c_boolean has_sigparent;
  int32_t sigparent;
  protobuf_c_boolean has_sig;
  int32_t sig;
  protobuf_c_boolean has_code;
  uint32_t code;
  protobuf_c_boolean has_stops;
  uint32_t stops;
  protobuf_c_boolean has_stype;
  uint32_t stype;
  protobuf_c_boolean has_singlethread;
  uint64_t singlethread;
  protobuf_c_boolean has_suspendcount;
  int32_t suspendcount;
  protobuf_c_boolean has_dynlib;
  uint64_t dynlib;
  char *name;
  char *elfpath;
  char *randomizedpath;
  protobuf_c_boolean has_numthreads;
  int32_t numthreads;
  size_t n_mapentries;
  DbgVmEntry **mapentries;
};
#define DBG_PROCESS_FULL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_process_full__descriptor) \
    , 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,NULL }


struct  _DbgVmEntry
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean has_start;
  uint64_t start;
  protobuf_c_boolean has_end;
  uint64_t end;
  protobuf_c_boolean has_offset;
  uint64_t offset;
  protobuf_c_boolean has_protection;
  int32_t protection;
};
#define DBG_VM_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_vm_entry__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _DbgProcessLimited
{
  ProtobufCMessage base;
  protobuf_c_boolean has_processid;
  int32_t processid;
  char *name;
  size_t n_entries;
  DbgVmEntry **entries;
};
#define DBG_PROCESS_LIMITED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&dbg_process_limited__descriptor) \
    , 0,0, NULL, 0,NULL }


/* DbgGpRegisters methods */
void   dbg_gp_registers__init
                     (DbgGpRegisters         *message);
size_t dbg_gp_registers__get_packed_size
                     (const DbgGpRegisters   *message);
size_t dbg_gp_registers__pack
                     (const DbgGpRegisters   *message,
                      uint8_t             *out);
size_t dbg_gp_registers__pack_to_buffer
                     (const DbgGpRegisters   *message,
                      ProtobufCBuffer     *buffer);
DbgGpRegisters *
       dbg_gp_registers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_gp_registers__free_unpacked
                     (DbgGpRegisters *message,
                      ProtobufCAllocator *allocator);
/* DbgFpRegisters methods */
void   dbg_fp_registers__init
                     (DbgFpRegisters         *message);
size_t dbg_fp_registers__get_packed_size
                     (const DbgFpRegisters   *message);
size_t dbg_fp_registers__pack
                     (const DbgFpRegisters   *message,
                      uint8_t             *out);
size_t dbg_fp_registers__pack_to_buffer
                     (const DbgFpRegisters   *message,
                      ProtobufCBuffer     *buffer);
DbgFpRegisters *
       dbg_fp_registers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_fp_registers__free_unpacked
                     (DbgFpRegisters *message,
                      ProtobufCAllocator *allocator);
/* DbgDbRegisters methods */
void   dbg_db_registers__init
                     (DbgDbRegisters         *message);
size_t dbg_db_registers__get_packed_size
                     (const DbgDbRegisters   *message);
size_t dbg_db_registers__pack
                     (const DbgDbRegisters   *message,
                      uint8_t             *out);
size_t dbg_db_registers__pack_to_buffer
                     (const DbgDbRegisters   *message,
                      ProtobufCBuffer     *buffer);
DbgDbRegisters *
       dbg_db_registers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_db_registers__free_unpacked
                     (DbgDbRegisters *message,
                      ProtobufCAllocator *allocator);
/* DbgThreadLimited methods */
void   dbg_thread_limited__init
                     (DbgThreadLimited         *message);
size_t dbg_thread_limited__get_packed_size
                     (const DbgThreadLimited   *message);
size_t dbg_thread_limited__pack
                     (const DbgThreadLimited   *message,
                      uint8_t             *out);
size_t dbg_thread_limited__pack_to_buffer
                     (const DbgThreadLimited   *message,
                      ProtobufCBuffer     *buffer);
DbgThreadLimited *
       dbg_thread_limited__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_thread_limited__free_unpacked
                     (DbgThreadLimited *message,
                      ProtobufCAllocator *allocator);
/* DbgThreadFull methods */
void   dbg_thread_full__init
                     (DbgThreadFull         *message);
size_t dbg_thread_full__get_packed_size
                     (const DbgThreadFull   *message);
size_t dbg_thread_full__pack
                     (const DbgThreadFull   *message,
                      uint8_t             *out);
size_t dbg_thread_full__pack_to_buffer
                     (const DbgThreadFull   *message,
                      ProtobufCBuffer     *buffer);
DbgThreadFull *
       dbg_thread_full__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_thread_full__free_unpacked
                     (DbgThreadFull *message,
                      ProtobufCAllocator *allocator);
/* DbgCred methods */
void   dbg_cred__init
                     (DbgCred         *message);
size_t dbg_cred__get_packed_size
                     (const DbgCred   *message);
size_t dbg_cred__pack
                     (const DbgCred   *message,
                      uint8_t             *out);
size_t dbg_cred__pack_to_buffer
                     (const DbgCred   *message,
                      ProtobufCBuffer     *buffer);
DbgCred *
       dbg_cred__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_cred__free_unpacked
                     (DbgCred *message,
                      ProtobufCAllocator *allocator);
/* DbgFileDesc methods */
void   dbg_file_desc__init
                     (DbgFileDesc         *message);
size_t dbg_file_desc__get_packed_size
                     (const DbgFileDesc   *message);
size_t dbg_file_desc__pack
                     (const DbgFileDesc   *message,
                      uint8_t             *out);
size_t dbg_file_desc__pack_to_buffer
                     (const DbgFileDesc   *message,
                      ProtobufCBuffer     *buffer);
DbgFileDesc *
       dbg_file_desc__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_file_desc__free_unpacked
                     (DbgFileDesc *message,
                      ProtobufCAllocator *allocator);
/* DbgProcessFull methods */
void   dbg_process_full__init
                     (DbgProcessFull         *message);
size_t dbg_process_full__get_packed_size
                     (const DbgProcessFull   *message);
size_t dbg_process_full__pack
                     (const DbgProcessFull   *message,
                      uint8_t             *out);
size_t dbg_process_full__pack_to_buffer
                     (const DbgProcessFull   *message,
                      ProtobufCBuffer     *buffer);
DbgProcessFull *
       dbg_process_full__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_process_full__free_unpacked
                     (DbgProcessFull *message,
                      ProtobufCAllocator *allocator);
/* DbgVmEntry methods */
void   dbg_vm_entry__init
                     (DbgVmEntry         *message);
size_t dbg_vm_entry__get_packed_size
                     (const DbgVmEntry   *message);
size_t dbg_vm_entry__pack
                     (const DbgVmEntry   *message,
                      uint8_t             *out);
size_t dbg_vm_entry__pack_to_buffer
                     (const DbgVmEntry   *message,
                      ProtobufCBuffer     *buffer);
DbgVmEntry *
       dbg_vm_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_vm_entry__free_unpacked
                     (DbgVmEntry *message,
                      ProtobufCAllocator *allocator);
/* DbgProcessLimited methods */
void   dbg_process_limited__init
                     (DbgProcessLimited         *message);
size_t dbg_process_limited__get_packed_size
                     (const DbgProcessLimited   *message);
size_t dbg_process_limited__pack
                     (const DbgProcessLimited   *message,
                      uint8_t             *out);
size_t dbg_process_limited__pack_to_buffer
                     (const DbgProcessLimited   *message,
                      ProtobufCBuffer     *buffer);
DbgProcessLimited *
       dbg_process_limited__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   dbg_process_limited__free_unpacked
                     (DbgProcessLimited *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DbgGpRegisters_Closure)
                 (const DbgGpRegisters *message,
                  void *closure_data);
typedef void (*DbgFpRegisters_Closure)
                 (const DbgFpRegisters *message,
                  void *closure_data);
typedef void (*DbgDbRegisters_Closure)
                 (const DbgDbRegisters *message,
                  void *closure_data);
typedef void (*DbgThreadLimited_Closure)
                 (const DbgThreadLimited *message,
                  void *closure_data);
typedef void (*DbgThreadFull_Closure)
                 (const DbgThreadFull *message,
                  void *closure_data);
typedef void (*DbgCred_Closure)
                 (const DbgCred *message,
                  void *closure_data);
typedef void (*DbgFileDesc_Closure)
                 (const DbgFileDesc *message,
                  void *closure_data);
typedef void (*DbgProcessFull_Closure)
                 (const DbgProcessFull *message,
                  void *closure_data);
typedef void (*DbgVmEntry_Closure)
                 (const DbgVmEntry *message,
                  void *closure_data);
typedef void (*DbgProcessLimited_Closure)
                 (const DbgProcessLimited *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor dbg_gp_registers__descriptor;
extern const ProtobufCMessageDescriptor dbg_fp_registers__descriptor;
extern const ProtobufCMessageDescriptor dbg_db_registers__descriptor;
extern const ProtobufCMessageDescriptor dbg_thread_limited__descriptor;
extern const ProtobufCMessageDescriptor dbg_thread_full__descriptor;
extern const ProtobufCMessageDescriptor dbg_cred__descriptor;
extern const ProtobufCMessageDescriptor dbg_file_desc__descriptor;
extern const ProtobufCMessageDescriptor dbg_process_full__descriptor;
extern const ProtobufCMessageDescriptor dbg_vm_entry__descriptor;
extern const ProtobufCMessageDescriptor dbg_process_limited__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_external_2fdebugger_5fstructs_2eproto__INCLUDED */
